mysql --host sosin-db.ckuvmhr4e3ny.ap-northeast-2.rds.amazonaws.com -P 3306 -u root -p
비밀번호 복사, 붙여넣기 -> enter

-- 데이터베이스 생성
CREATE DATABASE study_db CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;

-- 사용자 생성 (Private IP)
CREATE USER sosin@172.31.10.157 IDENTIFIED BY 'sosin1234';

-- 사용자에 권한 부여 (study_db의 모든 테이블 *)
GRANT ALL PRIVILEGES ON study_db.* TO sosin@172.31.10.157;

CREATE TABLE Persons (
	PersonID INT,
    LastName VARCHAR(255),
    FirstName VARCHAR(255),
    Address VARCHAR(255),
    City VARCHAR(255)
);

DROP TABLE Persons;

-- MYSQL
CREATE TABLE Persons (
	PersonID INT NOT NULL AUTO_INCREMENT,
    LastName VARCHAR(255),
    FirstName VARCHAR(255),
    Address VARCHAR(255),
    City VARCHAR(255),
    PRIMARY KEY(PersonID)
);

-- W3Schools SQLite
CREATE TABLE Persons (
	PersonID INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    LastName VARCHAR(255),
    FirstName VARCHAR(255),
    Address VARCHAR(255),
    City VARCHAR(255)
);

-- Email Column 추가
ALTER TABLE Persons
ADD Email VARCHAR(255);

-- 특정 테이블 칼럼 조회
SHOW FULL COLUMNS FROM Persons;

-- 데이터 하나 추가
INSERT INTO Persons (LastName, FirstName, Address, City, Email)
VALUES ('Choi', 'Jason', 'Guro', 'Seoul', 'jason@gmail.com');

-- PersonID가 1인 데이터 수정
UPDATE Persons SET Address='gangnam'
WHERE PersonID=1;

-- Rename Column Name
ALTER TABLE table_name RENAME COLUMN old_column_name TO new_column_name;

-- PersonID가 1인 데이터 삭제
DELETE FROM Persons WHERE PersonID=1;


-- Students (Mysql)
CREATE TABLE Students (
    StudentID INT NOT NULL AUTO_INCREMENT,
    Name VARCHAR(32),
    Age INT,
    Address VARCHAR(255),
    PRIMARY KEY (StudentID)
);

-- W3Schools
CREATE TABLE Students (
    StudentID INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    Name VARCHAR(32),
    Age INT,
    Address VARCHAR(255)
);

-- Grades
CREATE TABLE Grades (
    StudentID INT,
    Math INT,
    English INT,
    Science INT
);

-- Students Insert
INSERT INTO Students (Name, Age, Address)
VALUES ('홍길동', 30, '인천');

INSERT INTO Students (Name, Age, Address)
VALUES ('이연결', 60, '서울');

INSERT INTO Students (Name, Age, Address)
VALUES ('이몽룡', 42, '대전');

INSERT INTO Students (Name, Age, Address)
VALUES ('성춘향', 27, '경기');


-- SELECT * FROM Students;
StudentID
홍길동 1
이연걸 2
이몽룡 3
성춘향 4

-- Grades Bulk Insert
INSERT INTO Grades (StudentID, Math, English, Science)
VALUES (1, 90, 80, 50),
        (2, 69, 76, 65),
        (3, 98, 87, 97),
        (4, 87, 67, 79);

-- 여기서부턴 W3Schools에서 진행

-- 고객(Customers)의 이름과 국가를 조회
SELECT CustomerName, Country
FROM Customers;

-- 고객(Customers)의 정보 전체 조회
SELECT * FROM Customers;

-- 고객(Customers)에서 국가 중복없이 목록 조회
SELECT DISTINCT Country
FROM Customers;

-- 국가(Country)가 France인 고객(Customers) 조회
SELECT *
FROM Customers
WHERE Country='Germany';


-- 고객(Customers) 테이블에서
-- Q. 이름(ContactName) 이 ‘Mar’로 시작하는 직원 조회
-- Q. 이름(ContactName) 이 ‘et’로 끝나는 직원 조회

SELECT *
FROM Customers
WHERE ContactName LIKE 'Mar%';

SELECT *
FROM Customers
WHERE ContactName LIKE '%et';

-- 국가(Country)가 France이고 이름(ContactName)이
-- ‘La’로 시작하는 고객(Customers) 조회

SELECT *
FROM Customers
WHERE Country='France' AND ContactName LIKE 'La%';

-- 국가(Country)가 France이거나 이름(ContactName)
-- 이 ‘La’로 시작하는 고객(Customers) 조회
SELECT *
FROM Customers
WHERE Country='France' OR ContactName LIKE 'La%';

-- 국가(Country)가 France가 아닌 고객(Customers) 조회
SELECT * 
FROM Customers
WHERE NOT Country='France';

-- 국가(Country)가 France 혹은 Spain에 사는
-- 고객(Customers) 조회

SELECT *
FROM Customers
WHERE Country IN ('France', 'Spain');

SELECT *
FROM Customers
WHERE Country IN ('France', 'Spain') AND ContactName LIKE 'Ma%';

-- 가격(Price)이 15에서 20사이인 상품(Products) 조회
SELECT *
FROM Products
WHERE Price BETWEEN 15 AND 20;

-- 우편번호(PostalCode)가 NULL인 고객(Customers) 조회
SELECT *
FROM Customers
WHERE PostalCode IS NULL;

-- PostalCode가 ''인 고객의 PostalCode를 NULL로 바꾸기
UPDATE Customers SET PostalCode=NULL
WHERE PostalCode='';

-- NOT NULL인 고객 조회
SELECT *
FROM Customers
WHERE PostalCode IS NOT NULL;

-- 정렬과 연산
-- 고객이름(CustomerName) 오름차순 조회
SELECT CustomerName
FROM Customers
ORDER BY CustomerName ASC;

-- 상품가격(Price) 내림차순 조회
SELECT *
FROM Products
ORDER BY Price DESC;

-- 10명만 조회
SELECT * 
FROM Customers
LIMIT 10;

-- 그 다음 10명 조회
SELECT *
FROM Customers
LIMIT 10 OFFSET 10;

-- CASE
-- 상품가격(Price)이 30 미만이면 ‘저‘, 30~50이면 ‘중‘,
-- 50 초과는 ‘고’로 조회
SELECT *,
CASE 
    WHEN Price < 30 THEN '저'
    WHEN Price <= 50 THEN '중'
    ELSE '고'
END
FROM Products;

-- 위 조회한 CASE의 이름을 ‘Level’으로 바꿔주세요
SELECT *,
CASE 
    WHEN Price < 30 THEN '저'
    WHEN Price <= 50 THEN '중'
    ELSE '고'
END AS 'Level'
FROM Products;

-- 국가(Country)가 France에 사는 고객(Customers)수 조회
SELECT COUNT(Country) AS FranceCustomers
FROM Customers
WHERE Country='France';

-- 전체 상품(Products)의 평균 가격(Price) 계산
SELECT AVG(Price) AS AvgPrice
FROM Products;

-- 주문상품 수량(Quantity) 합계 계산
SELECT SUM(Quantity)
FROM OrderDetails;

-- 가격(Price) 최소값 조회, 최대값 조회
SELECT MIN(Price) AS MinPrice, MAX(Price) AS MaxPrice
FROM Products;

-- 국가(Country)별 고객수 조회 (고객수 기준 오름차순)
SELECT Country, COUNT(CustomerID) AS TotalCustomer
FROM Customers
GROUP BY Country
ORDER BY TotalCustomer ASC;

-- Ascending (오름차순)
-- Descending (내림차순)

-- 국가(Country)별, 도시(City)별 고객수 조회 
-- (고객수 기준 내림차순)
SELECT Country, City, COUNT(CustomerID) AS TotalCustomer
FROM Customers
GROUP BY Country, City
ORDER BY TOtalCustomer DESC;

-- 국가(Country)별 고객수를 조회하고 그 중 5명 초과인
-- 국가만 조회 (고객수 기준 내림차순)
SELECT Country, COUNT(CustomerID) AS TotalCustomer
FROM Customers
GROUP BY Country
HAVING TotalCustomer > 5
ORDER BY TotalCustomer DESC;

-- Products에서 Price가 20 초과인 것 중,
-- SupplierID (공급자)별로 Price의 합계를 구하고
-- 가격 합계가 30을 넘는 공급자와 그 가격합
SELECT SupplierID, SUM(Price) AS SumPrice
FROM Products
-- WHERE Price > 20 (사전에 거르기 - 전체 데이터에 대해서)
GROUP BY SupplierID
HAVING SumPrice > 30; -- (사후에 거르기 - 집계된 결과에 대해서)


-- 서브쿼리
SELECT CustomerName
FROM (
  SELECT CustomerID, CustomerName 
  FROM Customers 
  WHERE CustomerName LIKE 'L%'
)
WHERE CustomerName LIKE 'La%';

-- Alias (앨리어스)
SELECT Customers.CustomerName AS CName
FROM Orders, Customers


-- 실습 문제들

-- 직원(Employees)중 이름(LastName)이 ‘King’인 직원의 
-- 이름과 생일(BirthDate)과 노트(Notes)를 조회해주세요.

SELECT LastName, BirthDate, Notes
FROM Employees
WHERE LastName='King';

-- 상품(Products)중 
-- 상품명(ProductName)이 ‘C’로 시작하고 
-- 가격(Price)이 20보다 큰 상품의 
-- 상품명과 가격을 가격이 비싼순으로 조회해주세요
SELECT ProductName, Price
FROM Products
WHERE ProductName LIKE 'C%' AND Price > 20
ORDER BY Price DESC;

-- 상품(Products)의 카테고리아이디(CategoryID) 별로 
-- 상품가격의 합, 가장 비싼 상품 가격, 가장 저렴한 상품 가격을 구하세요.
SELECT CategoryID, SUM(Price), MAX(Price), MIN(Price)
FROM Products
GROUP BY CategoryID;

-- 상품(Products)의 카테고리아이디(CategoryID) 별로 
-- 상품개수와 상품개수가 10개가 넘을경우 많음 아니면 적음이 표시되어있는 칼럼
-- 상품수가 많은 순서대로 조회해주세요
SELECT COUNT(ProductID) AS Quantity, 
CASE
    WHEN Quantity > 10 THEN '많음'
    ELSE '적음'
END AS '상품수준'
FROM Products
GROUP BY CategoryID
ORDER BY Quantity DESC;

-- 고객(Customers)의 국가(Country)별 
-- 고객수와 백분위 (국가별고객수 / 전체고객수 * 100)을 구하세요

-- 전체 고객수 구하는 쿼리
SELECT COUNT(*) 
FROM Customers;

SELECT Country, COUNT(CustomerID) AS CountryCustomers, 
    (COUNT(CustomerID) * 100 / (SELECT COUNT(CustomerID) FROM Customers)) AS Percentile
FROM Customers
GROUP BY Country;


-- INNER JOIN
SELECT *
FROM OrderDetails
INNER JOIN Products
WHERE OrderDetails.ProductID = Products.ProductID;


-- 주문이력이 있는 고객명(CustomerName)과 주문일 (OrderDate)를 조회
SELECT CustomerName, OrderDate -- 칼럼명
FROM Orders -- Table 1
INNER JOIN Customers -- Table 2
ON Orders.CustomerID = Customers.CustomerID; -- 서로 연결해놓은 키
-- WHERE Orders.CustomerID = Customers.CustomerID;

-- 이것도 가능
SELECT CustomerName, OrderDate
FROM Orders, Customers
WHERE Orders.CustomerID = Customers.CustomerID;


-- Tokyo에 위치한 공급자(Supplier)가 생산한 상품(Products) 목록 조회

-- 하나의 큰 문제를 작은 문제들로 분해한다.
-- 1. 상품 목록 조회
SELECT *
FROM Products;

-- 2. Tokyo라는 위치에 대한 칼럼이 Products에 없으니 Suppliers 조인
SELECT *
FROM Products
    INNER JOIN Suppliers
    ON Products.SupplierID = Suppliers.SupplierID;

-- 3. Tokyo에 위치한 공급자라는 조건문 추가
SELECT p.ProductID, p.ProductName, p.Price, s.SupplierName, p.SupplierID
FROM Products AS p
    INNER JOIN Suppliers AS s
    ON p.SupplierID = s.SupplierID
WHERE s.City='Tokyo';


-- 분류(CategoryName)가 Seafood인 상품명(ProductName) 조회
SELECT ProductName
FROM Products
    INNER JOIN Categories
    ON Products.CategoryID = Categories.CategoryID
WHERE CategoryName = 'Seafood';


-- 공급자(Supplier)가 공급한 상품의 
-- 공급자 국가(Country), 카테고리별로 상품건수와 평균가격 조회
SELECT Suppliers.Country, Categories.CategoryName, 
        COUNT(Products.ProductID) AS '상품건수', 
        AVG(Products.Price) AS '평균가격'
FROM Products
    INNER JOIN Suppliers
    ON Products.SupplierID = Suppliers.SupplierID
    INNER JOIN Categories
    ON Products.CategoryID = Categories.CategoryID
GROUP BY Suppliers.Country, Categories.CategoryID;

-- 키를 잘못 설정
SELECT Country, CategoryName, Price, 
        Count(ProductID) AS '상품건수', Avg(Price) AS '평균가격'
FROM Suppliers
	INNER JOIN Products
	ON Suppliers.SupplierID = Products.SupplierID
	JOIN Categories
    ON Products.CategoryID = Categories.CategoryID
GROUP BY Country, CategoryName;

-- 주문별 주문자명(CustomerName), 직원명(LastName), 배송자명(ShipperName), 주문상세갯수

-- 1. Orders랑 OrderDetails 바꿔보기 !
SELECT CustomerName, LastName, ShipperName, 
        COUNT(OrderDetailID) AS '주문상세개수'
FROM Orders
    INNER JOIN Customers
    ON Orders.CustomerID = Customers.CustomerID
    INNER JOIN Employees
    ON Orders.EmployeeID = Employees.EmployeeID
    INNER JOIN Shippers
    ON Orders.ShipperID = Shippers.ShipperID
    INNER JOIN OrderDetails
    ON Orders.OrderID = OrderDetails.OrderID
GROUP BY Orders.OrderID;

-- 판매량(Quantity) 상위 TOP 3 공급자(supplier) 목록 조회
SELECT Suppliers.*, SUM(Quantity) AS TotalSales
FROM OrderDetails
    INNER JOIN Products
    ON OrderDetails.ProductID = Products.ProductID
    INNER JOIN Suppliers
    ON Products.SupplierID = Suppliers.SupplierID
GROUP BY Suppliers.SupplierID
ORDER BY TotalSales DESC
LIMIT 3;

-- 상품분류(Category)별, 고객지역(City)별 판매량 많은 순 정렬
SELECT City, CategoryName, SUM(Quantity) AS TotalSales
FROM OrderDetails AS od
    INNER JOIN Orders AS o
    ON od.OrderID = o.OrderID
    INNER JOIN Customers AS cu
    ON o.CustomerID = cu.CustomerID
    INNER JOIN Products AS p
    ON od.ProductID = p.ProductID
    INNER JOIN Categories AS ca
    ON p.CategoryID = ca.CategoryID
GROUP BY cu.City, ca.CategoryID
ORDER BY TotalSales DESC;

-- Products Categories가 두번 조인했음 (에러 수정하기)
SELECT CategoryName, Customers.City, SUM(OrderDetails.Quantity)
FROM Orders
	INNER JOIN OrderDetails
    ON Orders.OrderID = OrderDetails.OrderID
    INNER JOIN Categories
    ON Categories.CategoryID = Products.CategoryID
    INNER JOIN Products
    ON Products.CategoryID = Categories.CategoryID
    INNER JOIN Customers
    ON Orders.CustomerID = Customers.CustomerID
GROUP BY CategoryName, Customers.City
ORDER BY SUM(OrderDetails.Quantity) DESC;

-- 고객국가(Country)가 USA이고, 상품별 판매량(Quantity)의 합이 많은순으로 정렬
SELECT od.ProductID, p.ProductName, c.Country, 
        SUM(od.Quantity) AS TotalSales
FROM OrderDetails AS od
    INNER JOIN Orders AS o
    ON od.OrderID = o.OrderID
    INNER JOIN Customers AS c
    ON c.CustomerID = o.CustomerID
    INNER JOIN Products AS p
    ON p.ProductID = od.ProductID
WHERE Country='USA'
GROUP BY od.ProductID
ORDER BY TotalSales DESC;
